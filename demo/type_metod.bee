+----------------------------------------
 demonstrate rule associated to a type
----------------------------------------+
** enumeration with public members
type Number: {.zero, .one, .two} <: Ordinal;


** a rule with Number
rule convert(self ∈ Number) => (y ∈ S):
  y := ("zero"  if self = zero,
              "one"   if self = one,
              "two"   if self = two,
              "none");
return;

** a wrapper rule with convert
rule equal(self ∈ Number, s ∈ S) => (r ∈ L):
  r := (s = convert(x));
return;

rule main:
  test ∈ Number;
  test := zero; -- instance of Number
      
  ** calling test rules 
  print test.convert;       -- will print "zero"
  print test.equal('zero'); -- will print 1
return;

#end of module
