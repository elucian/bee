+---------------------------------
  High order rule & rule objects
----------------------------------+
#driver "ho" 

** create a rule factory
 
-- this rule can make a rule object
rule generator(min, max ∈ Z) => object():
  rule object() => (r ∈ Z):
    make .index := min ∈ Z;    
    make .max   := max ∈ Z;
    when .index > .max:      
      fail (201, "index out of bounds");
    else:
      alter r := .index;    
      alter .index += 1;    
    when;  
  rule;
rule;

-- instantiate one rule object
make count := generator(0,9);  

-- test rule object: count
trial:  
  make set := {} @ {Z}; 
  -- this loop is infinite
  while $T:
    alter set += count();
    write set.index; -- progressive grow
    write ','
  while;
  print; -- expect 0,1,2,3,4,5,6,7,8,9,  
other:
  -- loop was failing
  print set;  
trial;
-- use rule properties to check rule status
print count.max;   -- 9
print count.index; -- 10 (count is finished)

-- expectation verification: 
fail if set ≠ {0,1,2,3,4,5,6,7,8,9};

-- try to create count second time
-- instantiate another rule object
alter count := generator(4,12);  
print count.max;  -- expect 12
print count.index;-- expect 4

over;