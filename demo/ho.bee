+---------------------------------
  High order rules & rule objects
----------------------------------+
#name :=  "ho" ;

** create a rule prototype
 
**  this rule can be used or cloned 
rule generator{min, max ∈ Z}() => (r @ Z):
  make .index := min ∈ Z;
  when (.index > max) do
    fail (201, "index out of bounds");
  else
    alter r := .index;
    alter .index += 1;
  done;
return;

**  instantiate one rule object
clone count := generator{0,9};

**  instantiate a fixture for test
clone test  := generator{4,12};

**  test cloned rule: count()
trial
  make set ∈ {Z};
  **  this loop is infinite
  cycle
    alter set += count()
    write set.index-- progressive grow
    write ','
  repeat;
  print; ** expect 0,1,2,3,4,5,6,7,8,9,  
other
  **  count() is failing
  print set
done;

**  use rule properties to check rule status
print count.max;  **  9
print count.index;-- 10 (count is finished)

**  expectation verification: 
fail if set ≠ {0,1,2,3,4,5,6,7,8,9};

**  inspect the other clone object
print test.max;   **  expect 12
print test.index; **  expect 4

**  inspect the prototype
print generator.max; **  expect 0
print generator.min; **  expect 0

over.
