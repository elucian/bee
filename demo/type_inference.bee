+-----------------------------------
  type inference is using
  operator := with initialization
-----------------------------------+
** constant type inference
store a := 10;     -- Z (integer on 64bit)
store x := 0.5;    -- R (double precision)
store y := 1/2;    -- Q (rational number)
store f := False;  -- L (logic)
store t := True;   -- L (logic)

** variable type inference
v := (1,2,3);     -- List of Z
s := "string";    -- Unrestricted capacity string
c := 'c';         -- Single symbol type A

** explicit conversion + inference
t := "23:45"      -> T24; -- Time
t := "1:45am"     -> T12; -- Time
d := "10/10/2010" -> DMY; -- Date

** optional parameters inference
rule add(x,y:0) => (z ∈ Z):
  z := x + y;
return;

** argument x is mandatory, y is optional
rule plus(x ∈ Z, y:1 ∈ Z) => (z ∈ Z):
  z := (x + y);
return;

** input/output arguments
rule inc(x, y ∈ [Z]):
  x += 1;
  y += 1;
return;


rule main:
  print add(1,1);  -- will print 2
  print plus(0);   -- will print 1
  print plus(1,2); -- will print 3
  
   (i,k) ∈ [Z] ; -- references
   inc(i,k);     -- i = 1 and k = 1
  print (i,k);        -- aver: 1 1
return;
#end of module
