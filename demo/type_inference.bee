+-----------------------------------
  type inference is using
  operator := with initialization
-----------------------------------+
load $pro_lib.console:(*);

** constant type inference
save a := 10;     // Z (integer on 64bit)
save x := 0.5;    // R (double precision)
save y := 1/2;    // Q (rational number)
save f := False;  // L (logic)
save t := True;   // L (logic)

** variable type inference
make v := (1,2,3);     // List of Z
make s := "string";    // Unrestricted capacity string
make c := 'c';         // Single symbol type A

** explicit conversion + inference
make t := "23:45"      -> T24; // Time
make t := "1:45am"     -> T12; // Time
make d := "10/10/2010" -> DMY; // Date

** optional parameters inference
method add(x,y:0) => (z ∈ Z):
  alter z := x + y;
return;

** argument x is mandatory, y is optional
method plus(x ∈ Z, y:1 ∈ Z) => (z ∈ Z):
  alter z := (x + y);
return;

** input/output arguments
method inc(x, y ∈ [Z]):
  alter x += 1;
  alter y += 1;
return;


method main():
  print add(1,1);  // will print 2
  print plus(0);   // will print 1
  print plus(1,2); // will print 3
  
  make  (i,k) ∈ [Z] ; // references
  apply inc(i,k);     // i = 1 and k = 1
  print (i,k);        // expect: 1 1
return;
#end of module
