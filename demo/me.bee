+----------------------------------------
 demonstrate method associated to a type
----------------------------------------+
#driver "me"

-- enumeration with public members
def Number <: {.zero, .one, .two};

new test ε Number;
let test := zero; -- instance of Number

-- create a method for type Number
def convert(x @ Number) => (y ε S):
  let y := ('zero'  if x = zero,
            'one'   if x = one,
            'two'   if x = two,
            'none');
def;

-- a wrapper method for convert
def equal(x @ Number, s ε S) => (r ε L):
  let r := s = x.convert(); 
def;
    
-- calling test methods 
put test.convert();     -- will print "zero"
put test.equal('zero'); -- will print 1

over;