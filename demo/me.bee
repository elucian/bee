+----------------------------------------
 demonstrate method associated to a type
----------------------------------------+
#driver "me"

-- enumeration with public members
type  Number <: {.zero, .one, .two};

value test ∈ Number;
alter test := zero; -- instance of Number

-- create a method for type Number
aspect convert(x @ Number) => (y ∈ S):
  alter y := ('zero'  if x = zero,
              'one'   if x = one,
              'two'   if x = two,
              'none');
aspect;

-- a wrapper method for convert
aspect equal(x @ Number, s ∈ S) => (r ∈ L):
  alter r := s = x.convert(); 
aspect;
    
-- calling test methods 
print test.convert();     -- will print "zero"
print test.equal('zero'); -- will print 1

over;