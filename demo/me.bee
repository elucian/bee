+----------------------------------------
 demonstrate rule associated to a type
----------------------------------------+
#driver "me"
-- enumeration with public members
type Number <: {.zero, .one, .two}
make test ∈ Number
alter test := zero-- instance of Number
-- make a rule for define Number
rule convert(x @ Number) => (y @ S)
  alter y := ('zero'  if x = zero,
              'one'   if x = one,
              'two'   if x = two,
              'none')
return

-- a wrapper rule for convert
rule equal(x @ Number, s @ S) => (r ∈ L)
  alter r := s = x.convert()
return
    
-- calling test rules 
print test.convert()     ; will print "zero"
print test.equal('zero') ; will print 1
over.