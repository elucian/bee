+----------------------------------------
 demonstrate aspect associated to a define
----------------------------------------+
#driver "me"
-- enumeration with public members
type Number <: {.zero, .one, .two};
make test ∈ Number;
alter test := zero; -- instance of Number
-- make a aspect for define Number
functor convert(x @ Number) => (y ∈ S):
  alter y := ('zero'  if x = zero,
              'one'   if x = one,
              'two'   if x = two,
              'none');
functor;
-- a wrapper aspect for convert
functor equal(x @ Number, s ∈ S) => (r ∈ L):
  alter r := s = x.convert(); 
functor;
    
-- calling test aspects 
print test.convert();     -- will print "zero"
print test.equal('zero'); -- will print 1
over;