+-----------------------------------
  Producer-consumer design pattern 
-----------------------------------+
** data source/target to process
s := [0](1000); --array of integers

** producer coroutine
rule foo(channel ∈ (N), start, end, batch ∈ N):
    ** prepare next batch    
  cycle:
    mark := start;
  while mark < end do    
    if channel.length < batch do
      channel <+ mark; --append mark to channel
      exit if mark = end;    --stop the producer
      mark += 1; --next number in channel
    done;
    yield; --suspend producer
    mark := 0;
  repeat;  
return;

** consumer coroutine
rule bar(channel ∈ (N), batch ∈ N):  
  cycle:  
    index = 0;
  while channel.length > 0 do
    for ∀ index ∈ (0..batch)  do
       write channel.head,",";  
       channel -? channel.head;
       wait 1; --slow down with a second
       exit if channel.length = 0; --empty
    done;
    print
    yield; --suspend consumer
  repeat;  
return;

rule main:  
  cycle:
    ** prepare a channel
    ch ∈  (N); --empty list of natural numbers
    ** activate producer
    begin foo(ch, start:1000, end:2000, batch:100); --synchronous call  
  while ch.length > 0 do
    ** prepare consumers
    for ∀ i ∈ (1..4) do
      begin bar(n); --asynchronous call
    repeat; 
    yield bar; -- execute consumers on 4 threads
    yield foo if (ch.length = 0); -- execute producer on single thread
  repeat;  
return;  
#end of module
