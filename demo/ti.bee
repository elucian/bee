+-----------------------------------
      type inference demo
-----------------------------------+
#name :=  "ti";

-- constant type inference
define a := 10;     -- Z (integer on 64bit)
define x := 0.5;    -- R (double precision)
define y := 1/2;    -- Q (rational number)
define f := False;  -- L (logic)
define t := True;   -- L (logic)
-- variable type inference
make v := (1,2,3)    ; -- List of Z
make s := 'string'   ; -- String capacity 256
make c := 'c'        ; -- Single character

-- explicit conversion + inference
make t := '23:45'      -> T24; -- Time
make t := '1:45am'     -> T12; -- Time
make d := '10/10/2010' -> DMY; -- Date

-- optional parameters inference
rule add(x,y:0) => (z ∈ Z):
  alter z := x + y;
return;

print add(1,1); -- will print 2

-- argument x is mandatory, y is optional
rule plus(x ∈ Z, y:1) => (z ∈ Z):
  alter z := (x + y);
return;

print plus(1); -- will print 2

-- input/output arguments, y is optional 
rule inc(x @ Z, y:0 @ Z):
  alter x += 1;
  alter y += 1;
return;

make i,k := 0;  -- references
apply inc(i);   -- i = 1 
apply inc(i,k); -- i = 2 and k = 1

over.
