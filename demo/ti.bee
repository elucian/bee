+-----------------------------------
      type inference demo
-----------------------------------+
#driver "ti"

-- constant type inference

static a := 10;  -- i8 (integer on 64bit)
static x := 0.5; -- d8 (double precision)
static y := 1/2; -- Q  (rational number)
static f := $⊥;  -- L  (logic false)
static t := $⊤;  -- L  (logic true)

-- variable type inference
value  v := (1,2,3);    -- List of i8
value s := 'string';    -- String capacity 255
value c := `c`          -- ASCII Char

-- explicit conversion + inference
value t := '1:45am'     -> T12; -- Time
value t := '23:45'      -> T24; -- Time
value d := '10/10/2010' -> DMY; -- Date

-- optional parameters inference
aspect add(x,y:0) => (z ∈ Z):
  alter z := x + y; 
aspect;

print add(1,1); -- will print 2

-- argument x is mandatory, y is optional
aspect plus(x ∈ Z, y : 1) => (z ∈ Z):
  alter z := (x + y);  
aspect;
print plus(1); -- will print 2

-- input/output arguments, y is optional 
aspect inc(x @ Z, y : 0):
  alter x += 1;  
  alter y += 1;
aspect;

value i,k := 0; -- references
inc(i);   --> i = 1 
inc(i,k); --> i = 2 and k = 1

over;