+-----------------------------------
      type inference demo
-----------------------------------+
#driver "ti"

-- constant type inference
def a := 10;  -- i8 (integer on 64bit)
def x := 0.5; -- d8 (double precision)
def y := 1/2; -- Q  (rational number)
def f := $0;  -- L  (logic false)
def t := $1;  -- L  (logic true)

-- variable type inference
new v := (1,2,3);     -- List of i8
new s := 'string';    -- String capacity 255
new c := `c`          -- ASCII Char

-- explicit conversion + inference
new t := '1:45am'     -> T12; -- Time
new t := '23:45'      -> T24; -- Time
new d := '10/10/2010' -> DMY; -- Date

-- optional parameters inference
def add(x,y:0) => (z ε Z):
  let z := x + y; 
def;

put add(1,1); -- will print 2

write;

-- argument x is mandatory, y is optional
def plus(x ε Z, y : 1) => (z ε Z):
  let z := (x + y);  
def;
put plus(1); -- will print 2

-- input/output arguments, y is optional 
def inc(x @ Z, y : 0):
  let x += 1;  
  let y += 1;
def;

new i,k := 0; -- references
inc(i);   --> i = 1 
inc(i,k); --> i = 2 and k = 1

write;
over;