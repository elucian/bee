+-----------------------------------
      define inference demo
-----------------------------------+
#driver "ti"
-- constant define inference
static a := 10;  -- Z (integer on 64bit)
static x := 0.5; -- R (double precision)
static y := 1/2; -- Q  (rational number)
static f := $F;  -- L  (logic false)
static t := $T;  -- L  (logic true)
-- variable define inference
make v := (1,2,3);    -- List of Z
make s := 'string';    -- String capacity 255
make c := `c`          -- ASCII Char
-- explicit conversion + inference
make t := '1:45am'     -> T12; -- Time
make t := '23:45'      -> T24; -- Time
make d := '10/10/2010' -> DMY; -- Date
-- optional parameters inference
functor add(x,y:0) => (z ∈ Z):
  alter z := x + y; 
functor;

print add(1,1); -- will print 2
-- argument x is mandatory, y is optional
functor plus(x ∈ Z, y : 1) => (z ∈ Z):
  alter z := (x + y);  
functor;
print plus(1); -- will print 2
-- input/output arguments, y is optional 
aspect inc(x @ Z, y : 0):
  alter x += 1;  
  alter y += 1;
aspect;

make i,k := 0; -- references
solve inc(i);   --> i = 1 
solve inc(i,k); --> i = 2 and k = 1
over;