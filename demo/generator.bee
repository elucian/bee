+-----------------------------------
|      Generator Class demo        |
+----------------------------------+
** first a class
type GenI: {min ,max , ci ∈ Z} <: Object;

rule GenI(p_min, p_max ∈ Z) =>(self ∈ GenI):
    
    ** prepare result as object
    self = {p_min, p_max, 0} ∈ GenI;
    
    ** reset generator
    rule .reset(self ∈ GenI, p_min , p_max ∈ Z):
      self.min := p_min;
      self.max := p_max;
      self.ci  := p_min;
    return;

    ** get next index
    rule .make(self ∈ GenI) => (i ∈ Z):
      i  := self.ci;
      self.ci += 1;
    return;

    ** detect if finish
    rule .finish(self ∈ GenI)  => (r ∈ L):
      r := (self.ci ≥ self.max);
    return;   
return;

rule main:
  ** use GenI constructor: 
  foo := GenI(10, 20);
  cycle:
    x := 0;
  while ¬ foo.finish() do
    x := foo.next();
    write (x,",");
  repeat;
   
  ** flush the buffer
  print; --10,11,12,13,14,15,16,17,18,19,20, 
   
  ** test reset rule
   foo.reset();
  fail if foo.ci ≠ 10; -- aver: 10
return;   
#end of module
