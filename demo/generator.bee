+-----------------------------------
|      Generator Class demo        |
+----------------------------------+
** first make a class
type GenI: {min ,max , ci ∈ Z} <: Object;

rule GenI:
    ** reset generator
    rule reset(self ∈ GenI, p_min , p_max ∈ Z):
      alter self.min := p_min;
      alter self.max := p_max;
      alter self.ci  := p_min;
    return;

    ** get next index
    rule next(self ∈ GenI) => (i ∈ Z):
      alter i  := self.ci;
      alter self.ci += 1;
    return;

    ** detect if finish
    rule finish(self ∈ GenI)  => (r ∈ L):
      alter r := (self.ci ≥ self.max);
    return;
    
    ** constructor
    rule(min, max ∈ Z) =>(self ∈ GenI):
       self = {min, max, 0} ∈ GenI;
    return;
return;

rule main():
   ** use GenI constructor: 
   make foo := GenI(10, 20);
   make x   := 0;
   if ¬ foo.finish() do
     alter x := foo.next();
     write (x,",");
   cycle;
   
   ** flush the buffer
   print; //10,11,12,13,14,15,16,17,18,19,20, 
   
   ** test reset rule
   apply foo.reset();
   fail if foo.ci ≠ 10; // expect: 10
return;   
#end of module
